name: Build and Push All Modules to ECR

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [account-service, api-gateway, eureka-server, external-api-proxy]  # 너 프로젝트의 모듈 이름들

    env:
      ECR_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}

    steps:
      - name: Set image tag
        run: echo "IMAGE_TAG=${{ github.ref_name }}-$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

#      - name: Check changes
#        id: changes
#        run: |
#          echo "CHANGED=false" >> $GITHUB_ENV
#          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "${{ matrix.service }}/"; then
#            echo "CHANGED=true" >> $GITHUB_ENV
#          fi

      - name: Skip if no change
#        if: env.CHANGED == 'false'
        run: echo "No changes in ${{ matrix.service }}. Skipping..."

      - name: Set up JDK 17
#        if: env.CHANGED == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission to Gradle
#        if: env.CHANGED == 'true'
        run: chmod +x gradlew

      - name: Build JAR for ${{ matrix.service }}
#        if: env.CHANGED == 'true'
        run: ./gradlew :${{ matrix.service }}:bootJar -x test

      - name: Configure AWS credentials
#        if: env.CHANGED == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
#        if: env.CHANGED == 'true'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag Docker image
#        if: env.CHANGED == 'true'
        run: |
          docker build -t ${{ env.ECR_URI }}:${{ matrix.service }}-$IMAGE_TAG ./${{ matrix.service }}

      - name: Push to ECR
#        if: env.CHANGED == 'true'
        run: |
          docker push ${{ env.ECR_URI }}:${{ matrix.service }}-$IMAGE_TAG

#      - name: Download base task definition
#        run: |
#          aws ecs describe-task-definition \
#            --task-definition ${{ matrix.service }}-task \
#            --query 'taskDefinition' \
#            --output json > task-definition.json
#
#      - name: Replace image URL and trim fields
#        run: |
#          IMAGE="${{ env.ECR_URI }}:${{ matrix.service }}-$IMAGE_TAG"
#          jq --arg image "$IMAGE" '
#          {
#            family,
#            networkMode,
#            containerDefinitions: [
#              {
#                name: .containerDefinitions[0].name,
#                image: $image,
#                essential: .containerDefinitions[0].essential,
#                portMappings: .containerDefinitions[0].portMappings
#              }
#              + (if .containerDefinitions[0].environment then {environment: .containerDefinitions[0].environment} else {} end)
#                + (if .containerDefinitions[0].logConfiguration then {logConfiguration: .containerDefinitions[0].logConfiguration} else {} end)
#            ],
#            requiresCompatibilities,
#            cpu,
#            memory
#          }
#          + (if (.taskRoleArn != null and .taskRoleArn != "") then {taskRoleArn} else {} end)
#          + (if (.executionRoleArn != null and .executionRoleArn != "") then {executionRoleArn} else {} end)
#          ' task-definition.json > new-task-def.json
#
#
#      - name: Register new task definition
#        id: register-task-def
#        run: |
#          aws ecs register-task-definition \
#            --cli-input-json file://new-task-def.json > output.json
#          echo "TASK_DEF_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' output.json)" >> $GITHUB_ENV
#
#      - name: Update ECS service with new task definition
#        run: |
#          aws ecs update-service \
#            --cluster tranner-cluster \
#            --service ${{ matrix.service }}-service \
#            --task-definition $TASK_DEF_ARN


